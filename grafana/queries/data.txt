from(bucket: "SCD_IoT")
  |> range(start: -6h)
  |> filter(fn: (r) => r._measurement == "UPB")
  |> map(fn: (r) => ({
      _time: r._time,
      _value: r._value,
      series_name: r.station + "." + r._field,
      count: 1.0 // Counter for average
  }))
  |> group(columns: ["series_name"]) // Group by station and field
  |> cumulativeSum(columns: ["_value", "count"]) // Cumulative sum for average
  |> map(fn: (r) => ({
      _time: r._time,
      _value: r._value / r.count, // Calculate average
      series_name: r.series_name
  }))
  |> yield(name: "UPB Time Series")



///////////////////////////////?



from(bucket: "SCD_IoT")
  |> range(start: -6h)
  |> filter(fn: (r) => exists r._measurement) // Include all measurements
  |> sort(columns: ["_time"], desc: true) // Sort by time in descending order
  |> yield(name: "All Measurements Table")




  from(bucket: "SCD_IoT")
    |> range(start: -6h)
    |> filter(fn: (r) => exists r._measurement) // Include all measurements
    |> map(fn: (r) => ({
        _time: r._time,
        _value: r._value,
        series_name: r.station + "." + r._field // Join station and field for column names
    }))
    |> pivot(rowKey: ["_time"], columnKey: ["series_name"], valueColumn: "_value") // Create dynamic column names
    |> sort(columns: ["_time"], desc: true) // Sort rows by time in descending order
    |> yield(name: "All Measurements Table")

